# ===============================================
# SCRIPT POWERSHELL: SOLUCIONAR BACKEND
# Fecha: 20-01-2025
# Objetivo: Solucionar problema de puerto ocupado
# ===============================================

Write-Host ""
Write-Host "üîß SOLUCIONANDO PROBLEMA DEL BACKEND..." -ForegroundColor Yellow
Write-Host ""

# 1. Mostrar procesos actuales en puertos 5000 y 5001
Write-Host "üîç Verificando puertos ocupados..." -ForegroundColor Cyan
$port5000 = netstat -ano | Select-String ":5000"
$port5001 = netstat -ano | Select-String ":5001"

if ($port5000) {
    Write-Host "‚ö†Ô∏è  Puerto 5000 ocupado:" -ForegroundColor Red
    $port5000
} else {
    Write-Host "‚úÖ Puerto 5000 libre" -ForegroundColor Green
}

if ($port5001) {
    Write-Host "‚ö†Ô∏è  Puerto 5001 ocupado:" -ForegroundColor Red
    $port5001
} else {
    Write-Host "‚úÖ Puerto 5001 libre" -ForegroundColor Green
}

Write-Host ""

# 2. Terminar procesos Node.js
Write-Host "‚èπÔ∏è  Terminando procesos Node.js..." -ForegroundColor Yellow

try {
    $nodeProcesses = Get-Process -Name "node" -ErrorAction SilentlyContinue
    if ($nodeProcesses) {
        Write-Host "üìã Procesos Node.js encontrados: $($nodeProcesses.Count)"
        Stop-Process -Name "node" -Force -ErrorAction SilentlyContinue
        Write-Host "‚úÖ Procesos Node.js terminados" -ForegroundColor Green
    } else {
        Write-Host "‚ÑπÔ∏è  No hay procesos Node.js ejecut√°ndose" -ForegroundColor Blue
    }
} catch {
    Write-Host "‚ö†Ô∏è  Error terminando procesos Node.js: $($_.Exception.Message)" -ForegroundColor Red
}

# 3. Terminar procesos nodemon
try {
    $nodemonProcesses = Get-Process -Name "nodemon" -ErrorAction SilentlyContinue
    if ($nodemonProcesses) {
        Stop-Process -Name "nodemon" -Force -ErrorAction SilentlyContinue
        Write-Host "‚úÖ Procesos nodemon terminados" -ForegroundColor Green
    }
} catch {
    # Ignorar error si no existe nodemon
}

Write-Host ""

# 4. Verificar configuraci√≥n
Write-Host "üîß Verificando configuraci√≥n del backend..." -ForegroundColor Cyan

$backendIndexPath = "backend/index.js"
if (Test-Path $backendIndexPath) {
    $indexContent = Get-Content $backendIndexPath -Raw
    if ($indexContent -match "5001") {
        Write-Host "‚úÖ Backend configurado para puerto 5001" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Backend no configurado para puerto 5001" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Archivo backend/index.js no encontrado" -ForegroundColor Red
}

Write-Host ""

# 5. Mostrar instrucciones finales
Write-Host "üöÄ INSTRUCCIONES FINALES:" -ForegroundColor Green
Write-Host ""
Write-Host "1Ô∏è‚É£  Abre una nueva terminal/PowerShell" -ForegroundColor White
Write-Host "2Ô∏è‚É£  Ejecuta: cd backend" -ForegroundColor White
Write-Host "3Ô∏è‚É£  Ejecuta: npm run dev" -ForegroundColor White
Write-Host "4Ô∏è‚É£  El servidor deber√≠a iniciarse en puerto 5001" -ForegroundColor White
Write-Host ""
Write-Host "üìã Si persiste el problema:" -ForegroundColor Yellow
Write-Host "   - Reinicia VS Code completamente" -ForegroundColor White
Write-Host "   - Reinicia tu computadora" -ForegroundColor White
Write-Host "   - Verifica que no tengas otros servicios en puerto 5001" -ForegroundColor White
Write-Host ""
Write-Host "‚úÖ SCRIPT COMPLETADO" -ForegroundColor Green
Write-Host ""

# Pausa para que el usuario pueda leer
Write-Host "Presiona cualquier tecla para continuar..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")